Thread.sleep(500);   // this will make the thread wait for half a second

Threading is applicable when no dependencies are present between or among threads

Extending our class with Thread Class,

1. Thread class comes from java.lang.Thread 
2. Thread class has run() method where we have to override while extending Thread class to our class
3. run() override method will have the implementation or code to be run that has no dependencies with other threads
4. Object.start() will invoke the run() method to start the thread
5. A java class will always have a default thread and that is main method
6. Each class extending the Thread class is a thread on it's own
7. To avoid both threads reaching scheduler at the same time we can use sleep() to make a thread wait for certain milli seconds
8. When multiple threads reach at the same time to invoke run method, the priority is given based on the less time a thread takes to execute and many such parameters

class Hi extends Thread {
   
   public void run() {
      try {
          System.out.println('Hi');
      }
      catch (Exception err) {
          System.out.println(err.getMessage());
      }
   }
}

class Hello extends Thread {
   
   public void run() {
      try {
          System.out.println('Hello');
      }
      catch (Exception err) {
          System.out.println(err.getMessage());
      }
   }
}

class MyThread {

    public static void main (String args[]) {
      Hi obj1 = new Hi();
      Hello obj2 = new Hello();
      
      obj1.start();
      try {
          Thread.sleep(20); 
          }
      catch (Exception err) {
          System.out.println(err.getMessage());
          }
      obj2.start();
}
