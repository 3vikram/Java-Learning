Implementing our class with Runnable Interface,

Runnable Interface does not have a start() method to invoke the run() method and hence we have to create a thread and pass the runnable object to it, by doing so the runnable object will have access to start() method vis Thread class

As a first step, you need to implement a run() method provided by a Runnable interface. This method provides an entry point for the thread and you will put your complete business logic inside this method. Following is a simple syntax of the run() method −

public void run( )

As a second step, you will instantiate a Thread object using the following constructor −

Thread(Runnable threadObj, String threadName);  

Where, threadObj is an instance of a class that implements the Runnable interface and threadName is the name given to the new thread.

Once a Thread object is created, you can start it by calling start() method, which executes a call to run( ) method. Following is a simple syntax of start() method −

void start();

Example,

class Hi implements Runnable {
   
   public void run() {
      try {
          System.out.println('Hi');
      }
      catch (Exception err) {
          System.out.println(err.getMessage());
      }
   }
}

class Hello implements Runnable {
   
   public void run() {
      try {
          System.out.println('Hello');
      }
      catch (Exception err) {
          System.out.println(err.getMessage());
      }
   }
}

class MyThread {

    public static void main (String args[]) {
      Runnable obj1 = new Hi(); // Runnable Object
      Runnable obj2 = new Hello(); // Runnable Object
      
      Thread t1 = new Thread(Hi);
      Thread t2 = new Thread(Hello);
      
      t1.start();
      try {
          Thread.sleep(20); 
          }
      catch (Exception err) {
          System.out.println(err.getMessage());
          }
      t2.start();
}



