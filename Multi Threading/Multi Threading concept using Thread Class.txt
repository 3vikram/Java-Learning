Thread.sleep(500);   // this will make the thread wait for half a second

Threading is applicable when no dependencies are present between or among threads

Extending our class with Thread Class,

1. Thread class comes from java.lang.Thread 
2. Thread class has run() method where we have to override while extending Thread class to our class
3. run() override method will have the implementation or code to be run that has no dependencies with other threads
4. Object.start() will invoke the run() method to start the thread
5. A java class will always have a default thread and that is main method
6. Each class extending the Thread class is a thread on it's own
7. To avoid both threads reaching scheduler at the same time we can use sleep() to make a thread wait for certain milli seconds
8. When multiple threads reach at the same time to invoke run method, the priority is given based on the less time a thread takes to execute and many such parameters
9. Thread1.join() will make the other threads to wait till the Thread1 is complete. We can also specify a delay inside the .join() in milli seconds, this will make sure that the thread1 will run for the specified time or till it is complete with in the specified time and then the other threads can start running.
10. Thread1.isAlive() method will return if the thread is alive or not as a boolean value
11. Thread.getName() method will return the thread name
12. Thread.setName() method will allow you to set a thread name
13. Name for the thread can also be set when creating a thread object like,
      Thread t1 = new Thread(<Runnable Object>, <Thread Name>)
      Note: Refer the .java multi threading implementation using runnable interface example for better understanding
14. Thread.getPriority() will give you the priority of the thread. By default the thread priority is set to 5. Priority ranges from 1 - 10
      1 means least priority and 10 means highest priority
15. Thread.setPriority(10) will set the priority of a thread. We can also use Thread.setPriority(Thread.MIN_PRIORIY) or Thread.setPriority(Thread.MAX_PRIORITY) or Thread.setPriority(Thread.NORM_PRIORITY)
16. synchronized key word used with the run() method to allow only one thread accessing this method one at a time

class Hi extends Thread {
   
   public void run() {
      try {
          System.out.println('Hi');
      }
      catch (Exception err) {
          System.out.println(err.getMessage());
      }
   }
}

class Hello extends Thread {
   
   public void run() {
      try {
          System.out.println('Hello');
      }
      catch (Exception err) {
          System.out.println(err.getMessage());
      }
   }
}

class MyThread {

    public static void main (String args[]) {
      Hi obj1 = new Hi();
      Hello obj2 = new Hello();
      
      obj1.start();
      try {
          Thread.sleep(20); 
          }
      catch (Exception err) {
          System.out.println(err.getMessage());
          }
      obj2.start();
      
      obj1.join();
      obj2.join();
      System.out.println('I am main thread');
}
